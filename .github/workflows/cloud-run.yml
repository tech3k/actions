name: Cloud Run Deployment
on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: false
        type: string
    secrets:
      RUN_PROJECT_PRODUCTION:
        required: true
      RUN_PROJECT_STAGING:
        required: true
      RUN_SA_KEY:
        required: true

jobs:
  Setup:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]') ||
      (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]')
    outputs:
      cachepath: ${{ steps.generate_cache_path.outputs.cachepath }}
    steps:
      - name: Checkout Latest Version
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: actions/checkout@v2
      - name: Checkout Latest Version (PR)
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Generate Cache Path
        id: generate_cache_path
        run: echo "::set-output name=cachepath::${{ runner.os }}-${{ github.sha }}-${{ github.run_attempt }}-yarn-${{ hashFiles('**/yarn.lock') }}"
      - uses: actions/cache@v2
        with:
          path: ./**/*
          key: ${{ steps.generate_cache_path.outputs.cachepath }}
      - name: Install Dependencies
        run: yarn install

  Test:
    runs-on: ubuntu-latest
    needs: Setup
    steps:
      - uses: actions/cache@v2
        with:
          path: ./**/*
          key: ${{ needs.Setup.outputs.cachepath }}
      - name: Test
        run: yarn test

  Lint:
    runs-on: ubuntu-latest
    needs: Setup
    steps:
      - uses: actions/cache@v2
        with:
          path: ./**/*
          key: ${{ needs.Setup.outputs.cachepath }}
      - name: Lint
        run: yarn lint

  Build:
    runs-on: ubuntu-latest
    needs:
      - Setup
      - Test
      - Lint
    env:
      PROJECT_ID: ${{ (github.ref_name == 'main' && secrets.RUN_PROJECT_PRODUCTION) || secrets.RUN_PROJECT_STAGING }}
      RUN_REGION: europe-west2
      SERVICE_NAME: ${{ inputs.SERVICE_NAME || github.event.repository.name }}
      RUN_SA_KEY: ${{ secrets.RUN_SA_KEY }}
    steps:
      - uses: actions/cache@v2
        with:
          path: ./**/*
          key: ${{ needs.Setup.outputs.cachepath }}
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ env.RUN_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
      - name: Build
        run: |-
          gcloud builds submit \
            --quiet \
            --tag "gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
  Deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ (github.ref_name == 'main' && 'Production') || ((github.event_name != 'pull_request_target' && github.event_name != 'pull_request') && 'Staging') || 'Preview' }}
      url: ${{ steps.generateURL.outputs.url }}
    needs:
      - Setup
      - Test
      - Lint
      - Build
    env:
      PROJECT_ID: ${{ (github.ref_name == 'main' && secrets.RUN_PROJECT_PRODUCTION) || secrets.RUN_PROJECT_STAGING }}
      RUN_REGION: europe-west2
      SERVICE_NAME: ${{ inputs.SERVICE_NAME || github.event.repository.name }}
      RUN_SA_KEY: ${{ secrets.RUN_SA_KEY }}
    steps:
      - name: Timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::t$(date +%s)"
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ env.RUN_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
      - name: Deploy
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v0'
        with:
          tag: ${{ steps.timestamp.outputs.timestamp }}
          no_traffic: ${{ (github.event_name == 'pull_request_target' || github.event_name == 'pull_request') }}
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.RUN_REGION }}
          image: 'gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}'
      - name: Make Public
        run: gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} --region="${{ env.RUN_REGION }}" --member="allUsers" --role="roles/run.invoker"
      - name: Send Traffic
        if: (github.event_name != 'pull_request_target' && github.event_name != 'pull_request')
        run: gcloud run services update-traffic ${{ env.SERVICE_NAME }} --region="${{ env.RUN_REGION }}" --to-tags ${{ steps.timestamp.outputs.timestamp }}=100
      - name: Generate URL
        id: generateURL
        run: |
          if ${{ (github.event_name != 'pull_request_target' && github.event_name != 'pull_request') }} == true; then
            echo "::set-output name=url::format("{0}", $(echo "${{ steps.deploy.outputs.url }}" | sed 's/${{ steps.timestamp.outputs.timestamp }}---//g'))"
          else
          echo "::set-output name=url::${{ steps.deploy.outputs.url }}"
          fi
